[
  {
    "objectID": "intro.html#example-least-squares",
    "href": "intro.html#example-least-squares",
    "title": "Introduction",
    "section": "Example: Least-Squares",
    "text": "Example: Least-Squares\n\nModel: \\[\ny_i = x_i'\\beta + \\epsilon_i\n\\]\n$Q_n() = _{i=1} (y_i - x_i’)^2"
  },
  {
    "objectID": "intro.html#example-maximum-likelihood",
    "href": "intro.html#example-maximum-likelihood",
    "title": "Introduction",
    "section": "Example: Maximum Likelihood",
    "text": "Example: Maximum Likelihood\n\nModel: \\(y_i\\) has conditional pdf \\(f(y|x_i;\\theta)\\), independent across \\(i\\)\n\\(Q_n(\\theta) = -\\frac{1}{n} \\sum_{i=1}^n \\log\\left(f(y_i | x_i; \\theta)\\right)\\)"
  },
  {
    "objectID": "intro.html#example-generalized-method-of-moments",
    "href": "intro.html#example-generalized-method-of-moments",
    "title": "Introduction",
    "section": "Example: Generalized Method of Moments",
    "text": "Example: Generalized Method of Moments\n\nModel: \\[\n\\Er\\left[g(y_i,x_i,\\theta_0) \\right] = 0\n\\] for moment function \\(g(y_i,x_i,\\cdot): \\Theta \\to \\R^k\\)\n$Q_n() = ({i=1}^n g(y_i,x_i,))’ W ({i=1}^n g(y_i,x_i,))\n\n\nMoment function or conditional density come from some economic model. We will briefly look at some more detailed examples to illustrate."
  },
  {
    "objectID": "intro.html#example-consumption-and-assets-1",
    "href": "intro.html#example-consumption-and-assets-1",
    "title": "Introduction",
    "section": "Example: Consumption and Assets",
    "text": "Example: Consumption and Assets\n\nHansen and Singleton (1982)\nModel \\[\n\\begin{align*}\n\\max_{c_t, q_t} & \\Er\\left[ \\sum_{t=0}^\\infty \\beta^t u(c_t) | \\mathcal{I}_0 \\right] \\\\\n\\text{s.t. } & \\;\\; p_t q_t + c_t \\leq (p_t + d_t)q_{t-1} + y_t\n\\end{align*}\n\\]"
  },
  {
    "objectID": "intro.html#example-consumption-and-assets-2",
    "href": "intro.html#example-consumption-and-assets-2",
    "title": "Introduction",
    "section": "Example: Consumption and Assets",
    "text": "Example: Consumption and Assets\n\nCleverly rearrange first order conditions: \\[\n\\Er\\left[\\beta \\frac{u'(c_{t+1})}{u'(c_t)} \\underbrace{\\frac{p_{t+1} + d_{t+1}}{p_t}}_{R_t} | \\mathcal{I}_s \\right] = 1 \\text{ for } s \\leq t\n\\]"
  },
  {
    "objectID": "intro.html#example-consumption-and-assets-3",
    "href": "intro.html#example-consumption-and-assets-3",
    "title": "Introduction",
    "section": "Example: Consumption and Assets",
    "text": "Example: Consumption and Assets\n\nAssume \\(u(c) = \\frac{c^{1-\\gamma}}{1-\\gamma}\\) \\[\n\\Er\\left[\\beta \\frac{c_{t+1}^{-\\gamma}}{c_t^{-\\gamma}} R_t | \\mathcal{I}_s \\right] = 1 \\text{ for } s \\leq t\n\\]\nModel implies \\[\n\\Er\\left[\\left(\\beta \\frac{c_{t+1}^{-\\gamma}}{c_t^{-\\gamma}} R_t -1 \\right)Z_t \\right] = 0\n\\] for any \\(Z_t \\in \\mathcal{I}_t\\)\nI.e. \\[\ng(\\overbrace{X_t}^{(c_t,c_{t+1},R_t,Z_t)}, \\underbrace{\\theta}_{(\\beta,\\gamma)}) = \\left(\\beta \\frac{c_{t+1}^{-\\gamma}}{c_t^{-\\gamma}} R_t -1 \\right)Z_t\n\\]"
  },
  {
    "objectID": "intro.html#example-random-coefficients-demand-1",
    "href": "intro.html#example-random-coefficients-demand-1",
    "title": "Introduction",
    "section": "Example: Random Coefficients Demand",
    "text": "Example: Random Coefficients Demand\n\nBerry, Levinsohn, and Pakes (1995)\nConsumers choose product: \\[\nj = \\argmax_{j \\in \\{0, ..., J\\}} x_{jt}' (\\bar{\\beta} + \\Sigma \\nu_i) + \\xi_{jt} + \\epsilon_{ijt}\n\\]\n\n\\(\\nu_i \\sim N(0,I_k)\\), \\(\\epsilon_{ijt} \\sim\\) Type I Extreme Value\nUnobserved demand shock \\(\\xi_{jt}\\)"
  },
  {
    "objectID": "intro.html#example-random-coefficients-demand-2",
    "href": "intro.html#example-random-coefficients-demand-2",
    "title": "Introduction",
    "section": "Example: Random Coefficients Demand",
    "text": "Example: Random Coefficients Demand\n\nAggregate demand: \\[\ns_{jt} = \\int \\frac{e^{x_{jt}'(\\bar{\\beta} + \\Sigma \\nu) + \\xi_{jt}}} {\\sum_{k = 0}^J e^{x_{kt}'(\\bar{\\beta} + \\Sigma \\nu) + \\xi_{kt}} } dF\\nu\n\\]"
  },
  {
    "objectID": "intro.html#example-random-coefficients-demand-3",
    "href": "intro.html#example-random-coefficients-demand-3",
    "title": "Introduction",
    "section": "Example: Random Coefficients Demand",
    "text": "Example: Random Coefficients Demand\n\nInstruments \\(Z_{jt}\\) with \\(E[\\xi_{jt} Z_{jt}] = 0\\)\n\\(g(s_{jt},x_{jt}, Z_{jt}, \\bar{\\beta},\\Sigma) = \\left(\\delta_{jt}(s_{\\cdot t}, x_{\\cdot t},\\beta,\\Sigma) - x_{jt}'\\bar{\\beta}\\right) Z_{jt}\\)\nwhere \\(\\delta_{jt}\\) solves \\[\ns_{jt} = \\int \\frac{e^{\\delta_{jt} + x_{jt}'\\Sigma \\nu}} {\\sum_{k = 0}^J e^{\\delta_{kt} + x_{kt}'\\Sigma \\nu}} dF\\nu\n\\]"
  },
  {
    "objectID": "intro.html#example-insurance-and-drug-demand-1",
    "href": "intro.html#example-insurance-and-drug-demand-1",
    "title": "Introduction",
    "section": "Example: Insurance and Drug Demand",
    "text": "Example: Insurance and Drug Demand\n\nEinav, Finkelstein, and Schrimpf (2015)\nRisk-neutral forward-looking individual faces uncertain health shocks, choose whether or not to fill prescriptions\nPrescriptions are defined by \\((\\theta ,\\omega )\\)\n\n\\(\\theta &gt;0\\) is the prescription’s (total) cost\n\\(\\omega &gt;0\\) is the monetized cost of not taking the drug\nArrive at weekly rate \\(\\lambda\\), drawn from \\(G(\\theta ,\\omega)=G_{2}(\\omega |\\theta )G_{1}(\\theta )\\)\n\\(\\lambda\\) follows a Markov process \\(H(\\lambda |\\lambda ^{\\prime })\\)\n\nInsurance defines \\(c(\\theta ,x)\\) – the out-of-pocket cost associated with a prescription that costs $$ when total spending so far is \\(x\\)"
  },
  {
    "objectID": "intro.html#example-insurance-and-drug-demand-2",
    "href": "intro.html#example-insurance-and-drug-demand-2",
    "title": "Introduction",
    "section": "Example: Insurance and Drug Demand",
    "text": "Example: Insurance and Drug Demand\n\nFlow utility \\[\n  u(\\theta ,\\omega ;x)=\\left \\{\n    \\begin{array}{ll}\n      -c(\\theta ,x) & if\\text{ }filled \\\\\n      -\\omega & if\\text{ }not\\text{ }filled%\n    \\end{array}%\n  \\right.\n  \\]\nBellman equation: \\[\n  \\begin{eqnarray*}\n    v(x,t,\\lambda _{t+1}) &=&E_{\\lambda |\\lambda _{t+1}} \\\\\n    &&\\hspace{-1.35in}\\left[\n      \\begin{array}{c}\n        (1-\\lambda )\\delta v(x,t-1,\\lambda )+ \\\\\n        \\lambda \\int \\max\\left \\{\n          \\begin{array}{l}\n            -c(\\theta ,x)+\\delta v(x+\\theta ,t-1,\\lambda ), \\\\\n            -\\omega +\\delta v(x,t-1,\\lambda )%\n          \\end{array}%\n        \\right \\} dG(\\theta ,\\omega )%\n      \\end{array}%\n    \\right]\n  \\end{eqnarray*}\n  \\] with terminal condition \\(v(x,0)=0\\) for all \\(x\\)"
  },
  {
    "objectID": "intro.html#example-insurance-and-drug-demand-3",
    "href": "intro.html#example-insurance-and-drug-demand-3",
    "title": "Introduction",
    "section": "Example: Insurance and Drug Demand",
    "text": "Example: Insurance and Drug Demand\n\nEstimate by simulated method of moments\n\nSimulate model\nMinimize difference between observed summary statistics and summary statistics in simulated data"
  },
  {
    "objectID": "intro.html#implementing-1",
    "href": "intro.html#implementing-1",
    "title": "Introduction",
    "section": "Implementing",
    "text": "Implementing\n\nNeed to go from mathematical description of model to code\nAll examples need to minimize an objective function\n\nHelpful to compute both objective function and its derivatives\n\nRandom coefficients demand model also needs to solve nonlinear equations and compute integrals\nDrug example needs numeric dynamic programming - function approximation and numeric integration"
  },
  {
    "objectID": "equationsolving.html#nonlinear-equations-1",
    "href": "equationsolving.html#nonlinear-equations-1",
    "title": "Solving Nonlinear Equations",
    "section": "Nonlinear Equations",
    "text": "Nonlinear Equations\n\n\\(F: \\R^n \\to \\R^n\\)\nWant to solve for \\(x\\) \\[\nF(x) = 0\n\\]"
  },
  {
    "objectID": "equationsolving.html#example-blp",
    "href": "equationsolving.html#example-blp",
    "title": "Solving Nonlinear Equations",
    "section": "Example: BLP",
    "text": "Example: BLP\n\nShare equation \\[\ns_{j} = \\int \\frac{e^{\\delta_{j} + x_{j}'\\Sigma \\nu}} {\\sum_{k = 0}^J e^{\\delta_{k} + x_{k}'\\Sigma \\nu}} dF\\nu\n\\]\n\\(J\\) equations to solve for \\(\\delta = (\\delta_{1t}, ..., \\delta_{Jt})\\)"
  },
  {
    "objectID": "equationsolving.html#newtons-method",
    "href": "equationsolving.html#newtons-method",
    "title": "Solving Nonlinear Equations",
    "section": "Newton’s Method",
    "text": "Newton’s Method\n\n\\(F(x)\\) differentiable with Jacobian \\(F'(x)\\)\nAlgorithm:\n\nInitial guess \\(x_0\\)\nUpdate based on first order expansion \\[\n\\begin{align*}\nF(x_{s+1}) \\approx F(x_s) + F'(x_s)(x_{s+1} - x_s) = & 0 \\\\\nx_{s+1} = & x_s + F'(x_s)^{-1} F(x_s)\n\\end{align*}\n\\]\nRepeat until \\(\\Vert F(x_s) \\Vert \\approx 0\\)"
  },
  {
    "objectID": "equationsolving.html#simple-idea-many-variations",
    "href": "equationsolving.html#simple-idea-many-variations",
    "title": "Solving Nonlinear Equations",
    "section": "Simple Idea, Many Variations",
    "text": "Simple Idea, Many Variations\n\nStep size\n\nInitial guess \\(x_0\\)\nUpdate based on first order expansion \\[\n\\begin{align*}\nF(x_{s+1}) \\approx F(x_s) + F'(x_s)(x_{s+1} - x_s) = & 0 \\\\\nx_{s+1} = x_s + {\\color{red}{\\lambda}} F'(x_s)^{-1} F(x_s)\n\\end{align*}\n\\]\nRepeat until \\(\\Vert F(x_s) \\Vert \\approx 0\\)\n\nline search or trust region"
  },
  {
    "objectID": "equationsolving.html#simple-idea-many-variations-1",
    "href": "equationsolving.html#simple-idea-many-variations-1",
    "title": "Solving Nonlinear Equations",
    "section": "Simple Idea, Many Variations",
    "text": "Simple Idea, Many Variations\n\n\nInitial guess \\(x_0\\)\nUpdate based on first order expansion \\[\n\\begin{align*}\nF(x_{s+1}) \\approx F(x_s) + F'(x_s)(x_{s+1} - x_s) = & 0\n\\end{align*}\n\\] approximately solve \\[\nF'(x_s) A = F(x_s)\n\\] update \\[\nx_{s+1} = x_s + \\lambda {\\color{red}{A}}\n\\]\nRepeat until \\(\\Vert F(x_s) \\Vert \\approx 0\\)\n\nEspecially if \\(F'(x_s)\\) is large and/or sparse"
  },
  {
    "objectID": "equationsolving.html#simple-idea-many-variations-2",
    "href": "equationsolving.html#simple-idea-many-variations-2",
    "title": "Solving Nonlinear Equations",
    "section": "Simple Idea, Many Variations",
    "text": "Simple Idea, Many Variations\n\n\nInitial guess \\(x_0\\)\nUpdate based on first order expansion \\[\n\\begin{align*}\nF(x_{s+1}) \\approx F(x_s) + F'(x_s)(x_{s+1} - x_s) = & 0 \\\\\nx_{s+1} = x_s + F'(x_s)^{-1} F(x_s)\n\\end{align*}\n\\]\nRepeat until \\({\\color{red}{\\Vert F(x_{s+1}) \\Vert &lt; rtol \\Vert\nF(x_0) \\Vert + atol }}\\)"
  },
  {
    "objectID": "equationsolving.html#simple-idea-many-variations-3",
    "href": "equationsolving.html#simple-idea-many-variations-3",
    "title": "Solving Nonlinear Equations",
    "section": "Simple Idea, Many Variations",
    "text": "Simple Idea, Many Variations\n\n\nInitial guess \\(x_0\\)\nUpdate based on first order expansion\n\ncompute \\(F'(x_s)\\) using:\n\nhand written code or\nfinite differences or\nsecant method \\(F'(x_s) \\approx \\frac{F(x_s) - F(x_{s-1})}{\\Vert x_s - x_{s-1} \\Vert}\\) or\nautomatic differentiation \\[\n\\begin{align*}\nF(x_{s+1}) \\approx F(x_s) + F'(x_s)(x_{s+1} - x_s) = & 0 \\\\\nx_{s+1} = x_s + F'(x_s)^{-1} F(x_s)\n\\end{align*}\n\\]\n\n\nRepeat until \\(\\Vert F(x_{s+1}) \\Vert \\approx 0\\)"
  },
  {
    "objectID": "equationsolving.html#simple-idea-many-variations-4",
    "href": "equationsolving.html#simple-idea-many-variations-4",
    "title": "Solving Nonlinear Equations",
    "section": "Simple Idea, Many Variations",
    "text": "Simple Idea, Many Variations\n\nKelley (2022) is thorough reference for nonlinear equation solving methods and their properties\nNonlinearSolve.jl gives unified interface for many methods"
  },
  {
    "objectID": "equationsolving.html#blp-share-equation",
    "href": "equationsolving.html#blp-share-equation",
    "title": "Solving Nonlinear Equations",
    "section": "BLP share equation",
    "text": "BLP share equation\n\n\n∫sgq (generic function with 1 method)"
  },
  {
    "objectID": "equationsolving.html#solving-for-delta",
    "href": "equationsolving.html#solving-for-delta",
    "title": "Solving Nonlinear Equations",
    "section": "Solving for \\(\\delta\\)",
    "text": "Solving for \\(\\delta\\)\n\n\n\nAlgorithm: NewtonRaphson(\n   descent = NewtonDescent()\n)\n\n----     -------------        -----------          -------             \nIter     f(u) inf-norm        Step 2-norm          cond(J)             \n----     -------------        -----------          -------             \n0        1.82428101e-01       9.65211049e-310      Inf                 \n1        3.01273299e-02       1.70789122e+00       2.63744218e+00      \n2        5.94098292e-03       5.27569311e-01       1.91424031e+00      \n3        1.53494624e-03       2.04661414e-01       2.16526016e+00      \n4        3.70822861e-04       7.85896918e-02       3.05654249e+00      \n5        7.95079980e-05       3.47582862e-02       5.16317447e+00      \n6        1.10785423e-05       1.29706541e-02       8.59340657e+00      \n7        4.11936788e-07       2.50335989e-03       1.17139946e+01      \n8        6.64506047e-10       1.00551122e-04       1.26157467e+01      \n9        1.76247905e-15       1.62724342e-07       1.26550054e+01      \nFinal    1.76247905e-15      \n----------------------      \nTrue δ: [-2.031557154931929, -1.57397420333144]\nSolved δ: [-1.9689272217047142, -1.5772302971336]\n||F(sol.u)||: 2.2888254720986747e-15\nError: 0.06271451732170019"
  },
  {
    "objectID": "equationsolving.html#alternative-algorithms",
    "href": "equationsolving.html#alternative-algorithms",
    "title": "Solving Nonlinear Equations",
    "section": "Alternative algorithms",
    "text": "Alternative algorithms\n\n\n\nAlgorithm: TrustRegion(\n   trustregion = GenericTrustRegionScheme(method = RadiusUpdateSchemes.Simple),\n   descent = Dogleg(newton_descent = NewtonDescent(), steepest_descent = SteepestDescent())\n)\n\n----     -------------        -----------          -------             \nIter     f(u) inf-norm        Step 2-norm          cond(J)             \n----     -------------        -----------          -------             \n0        1.82428101e-01       8.99199475e-322      Inf                 \n1        1.80268916e-01       2.03270424e-02       2.63744218e+00      \n2        1.75950002e-01       4.06540847e-02       2.61484193e+00      \n3        1.67320264e-01       8.13081694e-02       2.57133226e+00      \n4        1.50175269e-01       1.62616339e-01       2.49059505e+00      \n5        1.27131120e-01       2.23597466e-01       2.35089605e+00      \n6        1.05114341e-01       2.23597466e-01       2.19830531e+00      \n7        8.45131473e-02       2.23597466e-01       2.07739511e+00      \n8        6.56501612e-02       2.23597466e-01       1.98541863e+00      \n9        4.87654269e-02       2.23597466e-01       1.92260572e+00      \n10       3.40038617e-02       2.23597466e-01       1.88993542e+00      \n11       2.14335419e-02       2.23597466e-01       1.89041487e+00      \n12       1.11200296e-02       2.23597466e-01       1.93076944e+00      \n13       3.91957617e-03       2.23597466e-01       2.03331527e+00      \n14       9.85989520e-04       1.52709011e-01       2.34858093e+00      \n15       2.32730958e-04       6.07253397e-02       3.57108395e+00      \n16       4.58856484e-05       2.63832618e-02       6.13013075e+00      \n17       4.82159425e-06       8.56024120e-03       9.75569775e+00      \n18       8.51618883e-08       1.13831686e-03       1.22173784e+01      \n19       2.85474283e-11       2.08407016e-05       1.26469083e+01      \n20       3.74700271e-16       6.99080226e-09       1.26550664e+01      \nFinal    3.74700271e-16      \n----------------------      \n\n\nretcode: Success\nu: 2-element Vector{Float64}:\n -1.9689272217051998\n -1.5772302971335839\n\n\n\n\nWARNING: method definition for #fixed_point#13 at /home/paul/.julia/packages/FixedPointAcceleration/ahazt/src/1_MainFunctions.jl:163 declares type variable R but does not use it.\n\n\nretcode: Failure\nu: 2-element Vector{Float64}:\n 0.0\n 0.0"
  },
  {
    "objectID": "integration.html#example-random-coefficients-demand-1",
    "href": "integration.html#example-random-coefficients-demand-1",
    "title": "Integration",
    "section": "Example: Random Coefficients Demand",
    "text": "Example: Random Coefficients Demand\n\nBerry, Levinsohn, and Pakes (1995)\nConsumers choose product: \\[\nj = \\argmax_{j \\in \\{0, ..., J\\}} x_{jt}' (\\bar{\\beta} + \\Sigma \\nu_i) + \\xi_{jt} + \\epsilon_{ijt}\n\\]\n\n\\(\\nu_i \\sim N(0,I_k)\\), \\(\\epsilon_{ijt} \\sim\\) Type I Extreme Value\nUnobserved demand shock \\(\\xi_{jt}\\)"
  },
  {
    "objectID": "integration.html#example-random-coefficients-demand-2",
    "href": "integration.html#example-random-coefficients-demand-2",
    "title": "Integration",
    "section": "Example: Random Coefficients Demand",
    "text": "Example: Random Coefficients Demand\n\nAggregate demand: \\[\ns_{jt} = \\int \\frac{e^{x_{jt}'(\\bar{\\beta} + \\Sigma \\nu) + \\xi_{jt}}} {\\sum_{k = 0}^J e^{x_{kt}'(\\bar{\\beta} + \\Sigma \\nu) + \\xi_{kt}} } dF\\nu\n\\]"
  },
  {
    "objectID": "integration.html#example-random-coefficients-demand-3",
    "href": "integration.html#example-random-coefficients-demand-3",
    "title": "Integration",
    "section": "Example: Random Coefficients Demand",
    "text": "Example: Random Coefficients Demand\n\nInstruments \\(Z_{jt}\\) with \\(E[\\xi_{jt} Z_{jt}] = 0\\)\n\\(g(s_{jt},x_{jt}, Z_{jt}, \\bar{\\beta},\\Sigma) = \\left(\\delta_{jt}(s_{\\cdot t}, x_{\\cdot t},\\beta,\\Sigma) - x_{jt}'\\bar{\\beta}\\right) Z_{jt}\\)\nwhere \\(\\delta_{jt}\\) solves \\[\ns_{jt} = \\int \\frac{e^{\\delta_{jt} + x_{jt}'\\Sigma \\nu}} {\\sum_{k = 0}^J e^{\\delta_{kt} + x_{kt}'\\Sigma \\nu}} dF\\nu\n\\]"
  },
  {
    "objectID": "integration.html#shares-version-1",
    "href": "integration.html#shares-version-1",
    "title": "Integration",
    "section": "Shares: version 1",
    "text": "Shares: version 1\n\n\nshare (generic function with 1 method)\n\n\n\n\n∫(shareν, dFν) is not a function that exists, will create it next\nclear?\ncorrect?\nrobust?"
  },
  {
    "objectID": "integration.html#shares-version-2",
    "href": "integration.html#shares-version-2",
    "title": "Integration",
    "section": "Shares: version 2",
    "text": "Shares: version 2\n\n\nMain.Notebook.share\n\n\n\n\nadds documentation\nsome error checking on inputs\nprotects against overflow in exp\nAre these changes needed & desirable?"
  },
  {
    "objectID": "integration.html#integration-monte-carlo",
    "href": "integration.html#integration-monte-carlo",
    "title": "Integration",
    "section": "Integration: Monte-Carlo",
    "text": "Integration: Monte-Carlo\n\n\n∫mc (generic function with 1 method)\n\n\n\n\n(intmc, trueint, intmc - trueint) = (0.9280595764921347, 1.0, -0.07194042350786534)\nf = evaluated #6 100 times\n\n\n0"
  },
  {
    "objectID": "integration.html#integration-quasi-monte-carlo",
    "href": "integration.html#integration-quasi-monte-carlo",
    "title": "Integration",
    "section": "Integration: Quasi-Monte-Carlo",
    "text": "Integration: Quasi-Monte-Carlo\n\nUse “low discrepency sequences” to reduce variance of Monte-Carlo integrals\nError is \\(O\\left(\\frac{\\log(n)^d}{n})\\) for integrating \\(d\\) dimensional function with \\(n\\) draws\nSee Owen (2023) for details\n\n\n\n∫s (generic function with 2 methods)\n\n\n\n\nmean((abs(∫s(f, dx, ndraw = 100) - trueint) for s = 1:S)) = 0.02875751885407857\nmean((abs(∫mc(f, dx, ndraw = 100) - trueint) for s = 1:S)) = 0.11192792226826767\n\n\n0.11192792226826767"
  },
  {
    "objectID": "integration.html#integration-quadrature",
    "href": "integration.html#integration-quadrature",
    "title": "Integration",
    "section": "Integration: Quadrature",
    "text": "Integration: Quadrature\n\n\n∫q (generic function with 1 method)"
  },
  {
    "objectID": "integration.html#integration-sparse-grid-quadrature",
    "href": "integration.html#integration-sparse-grid-quadrature",
    "title": "Integration",
    "section": "Integration: Sparse Grid Quadrature",
    "text": "Integration: Sparse Grid Quadrature\n\n\n∫sgq (generic function with 1 method)"
  },
  {
    "objectID": "integration.html#integration-adaptive-cubature",
    "href": "integration.html#integration-adaptive-cubature",
    "title": "Integration",
    "section": "Integration: Adaptive Cubature",
    "text": "Integration: Adaptive Cubature\n\n\n∫cuba (generic function with 1 method)\n\n\n““” share(δ, Σ, dFν, x)\nComputes\ns_{j} = \\int \\frac{e^{\\delta_{j} + x_{j}'\\Sigma \\nu}} {\\sum_{k = 0}^J e^{\\delta_{k} + x_{k}'\\Sigma \\nu}} dF\\nu"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ECON 622: Computational Economics",
    "section": "",
    "text": "Slides\n\nIntroduction\nIntegration\nNonlinear Equation Solving\nBest Practices"
  },
  {
    "objectID": "bestpractices.html#goals",
    "href": "bestpractices.html#goals",
    "title": "Best Practices",
    "section": "Goals",
    "text": "Goals\n\nCorrect\nMaintainable & Extensible\n\nClear\nContained\nConsistent\n\nEfficient"
  },
  {
    "objectID": "bestpractices.html#tools",
    "href": "bestpractices.html#tools",
    "title": "Best Practices",
    "section": "Tools",
    "text": "Tools\n\n\n\n\n\n\n\nGoal\nTool(s)\n\n\n\n\nCorrect\ntests, static analysis\n\n\nMaintainable\nversion control, CI, documentation, dependency management\n\n\nEfficient\nbenchmarks, profiler"
  },
  {
    "objectID": "bestpractices.html#version-control-1",
    "href": "bestpractices.html#version-control-1",
    "title": "Best Practices",
    "section": "Version Control",
    "text": "Version Control\n\nessential\ngit is by far the most popular and what I recommend\ngit hosting services\n\ngithub.com\ngitlab.com\nbitbucket.org\n\nBenefits:\n\nbackup\nedit history\ncoordination"
  },
  {
    "objectID": "bestpractices.html#git",
    "href": "bestpractices.html#git",
    "title": "Best Practices",
    "section": "git",
    "text": "git\n\nUse it\ngit intro and tutorial and webinar"
  },
  {
    "objectID": "bestpractices.html#tool-setup-for-julia",
    "href": "bestpractices.html#tool-setup-for-julia",
    "title": "Best Practices",
    "section": "Tool Setup for Julia",
    "text": "Tool Setup for Julia\n\nOrganize code into a package\nGood advice aimed at scientific computing projects: Julia: Project Workflow\nSetup your package with a project skeleton\n\nPkgTemplates.jl\nBestieTemplate.jl\nDoctorWatson.jl\nHaider, Riesch, and Jirauschek (2021) for similar idea for other languages"
  },
  {
    "objectID": "bestpractices.html#pkgtemplates.jl",
    "href": "bestpractices.html#pkgtemplates.jl",
    "title": "Best Practices",
    "section": "PkgTemplates.jl",
    "text": "PkgTemplates.jl\nor\n\n\n[ Info: Running prehooks\n[ Info: Running hooks\n  Activating new project at `~/compecon/ECON622/qmd/SomeNewPackage/test`\n   Resolving package versions...\n    Updating `~/compecon/ECON622/qmd/SomeNewPackage/test/Project.toml`\n  [8dfed614] + Test\n    Updating `~/compecon/ECON622/qmd/SomeNewPackage/test/Manifest.toml`\n  [2a0f44e3] + Base64\n  [b77e0a4c] + InteractiveUtils\n  [56ddb016] + Logging\n  [d6f4376e] + Markdown\n  [9a3f8284] + Random\n  [ea8e919c] + SHA v0.7.0\n  [9e88b42a] + Serialization\n  [8dfed614] + Test\n  Activating project at `~/compecon/ECON622/qmd`\n  Activating project at `~/compecon/ECON622/qmd/SomeNewPackage/test`\n   Resolving package versions...\n    Updating `~/compecon/ECON622/qmd/SomeNewPackage/test/Project.toml`\n  [4c88cf16] + Aqua v0.8.7\n    Updating `~/compecon/ECON622/qmd/SomeNewPackage/test/Manifest.toml`\n  [4c88cf16] + Aqua v0.8.7\n  [34da2185] + Compat v4.16.0\n  [0dad84c5] + ArgTools v1.1.1\n  [56f22d72] + Artifacts\n  [ade2ca70] + Dates\n  [f43a241f] + Downloads v1.6.0\n  [7b1f6079] + FileWatching\n  [b27032c2] + LibCURL v0.6.4\n  [76f85450] + LibGit2\n  [8f399da3] + Libdl\n  [ca575930] + NetworkOptions v1.2.0\n  [44cfe95a] + Pkg v1.10.0\n  [de0858da] + Printf\n  [3fa0cd96] + REPL\n  [6462fe0b] + Sockets\n  [fa267f1f] + TOML v1.0.3\n  [a4e569a6] + Tar v1.10.0\n  [cf7118a7] + UUIDs\n  [4ec0a83e] + Unicode\n  [deac9b47] + LibCURL_jll v8.4.0+0\n  [e37daf67] + LibGit2_jll v1.6.4+0\n  [29816b5a] + LibSSH2_jll v1.11.0+1\n  [c8ffd9c3] + MbedTLS_jll v2.28.2+1\n  [14a3606d] + MozillaCACerts_jll v2023.1.10\n  [83775a58] + Zlib_jll v1.2.13+1\n  [8e850ede] + nghttp2_jll v1.52.0+1\n  [3f19e933] + p7zip_jll v17.4.0+2\nPrecompiling project...\n  ✓ Aqua\n  1 dependency successfully precompiled in 1 seconds. 4 already precompiled.\n  Activating project at `~/compecon/ECON622/qmd`\n  Activating project at `~/compecon/ECON622/qmd/SomeNewPackage/test`\n   Resolving package versions...\n   Installed JET ─ v0.9.9\n    Updating `~/compecon/ECON622/qmd/SomeNewPackage/test/Project.toml`\n  [c3a54625] + JET v0.9.9\n    Updating `~/compecon/ECON622/qmd/SomeNewPackage/test/Manifest.toml`\n  [da1fd8a2] + CodeTracking v1.3.6\n  [c3a54625] + JET v0.9.9\n  [aa1ae85d] + JuliaInterpreter v0.9.36\n  [6f1432cf] + LoweredCodeUtils v3.0.2\n  [1914dd2f] + MacroTools v0.5.13\n  [aea7be01] + PrecompileTools v1.2.1\n  [21216c6a] + Preferences v1.4.3\nPrecompiling project...\n  ✓ JET\n  1 dependency successfully precompiled in 25 seconds. 11 already precompiled.\n  Activating project at `~/compecon/ECON622/qmd`\n  Activating new project at `~/compecon/ECON622/qmd/SomeNewPackage/docs`\n   Resolving package versions...\n    Updating `~/compecon/ECON622/qmd/SomeNewPackage/docs/Project.toml`\n  [e30172f5] + Documenter v1.7.0\n    Updating `~/compecon/ECON622/qmd/SomeNewPackage/docs/Manifest.toml`\n  [a4c015fc] + ANSIColoredPrinters v0.0.1\n  [1520ce14] + AbstractTrees v0.4.5\n  [944b1d66] + CodecZlib v0.7.6\n  [ffbed154] + DocStringExtensions v0.9.3\n  [e30172f5] + Documenter v1.7.0\n  [d7ba0133] + Git v1.3.1\n  [b5f81e59] + IOCapture v0.2.5\n  [692b3bcd] + JLLWrappers v1.6.0\n  [682c06a0] + JSON v0.21.4\n  [0e77f7df] + LazilyInitializedFields v1.2.2\n  [d0879d2d] + MarkdownAST v0.1.2\n  [69de0a69] + Parsers v2.8.1\n  [aea7be01] + PrecompileTools v1.2.1\n  [21216c6a] + Preferences v1.4.3\n  [2792f1a3] + RegistryInstances v0.1.0\n  [3bb67fe8] + TranscodingStreams v0.11.2\n  [2e619515] + Expat_jll v2.6.2+0\n  [f8c6e375] + Git_jll v2.44.0+2\n  [94ce4f54] + Libiconv_jll v1.17.0+0\n  [458c3c95] + OpenSSL_jll v3.0.15+0\n  [0dad84c5] + ArgTools v1.1.1\n  [56f22d72] + Artifacts\n  [2a0f44e3] + Base64\n  [ade2ca70] + Dates\n  [f43a241f] + Downloads v1.6.0\n  [7b1f6079] + FileWatching\n  [b77e0a4c] + InteractiveUtils\n  [b27032c2] + LibCURL v0.6.4\n  [76f85450] + LibGit2\n  [8f399da3] + Libdl\n  [56ddb016] + Logging\n  [d6f4376e] + Markdown\n  [a63ad114] + Mmap\n  [ca575930] + NetworkOptions v1.2.0\n  [44cfe95a] + Pkg v1.10.0\n  [de0858da] + Printf\n  [3fa0cd96] + REPL\n  [9a3f8284] + Random\n  [ea8e919c] + SHA v0.7.0\n  [9e88b42a] + Serialization\n  [6462fe0b] + Sockets\n  [fa267f1f] + TOML v1.0.3\n  [a4e569a6] + Tar v1.10.0\n  [8dfed614] + Test\n  [cf7118a7] + UUIDs\n  [4ec0a83e] + Unicode\n  [deac9b47] + LibCURL_jll v8.4.0+0\n  [e37daf67] + LibGit2_jll v1.6.4+0\n  [29816b5a] + LibSSH2_jll v1.11.0+1\n  [c8ffd9c3] + MbedTLS_jll v2.28.2+1\n  [14a3606d] + MozillaCACerts_jll v2023.1.10\n  [efcefdf7] + PCRE2_jll v10.42.0+1\n  [83775a58] + Zlib_jll v1.2.13+1\n  [8e850ede] + nghttp2_jll v1.52.0+1\n  [3f19e933] + p7zip_jll v17.4.0+2\nPrecompiling project...\n  ✓ Git_jll\n  ✓ Git\n  ✓ Documenter\n  3 dependencies successfully precompiled in 13 seconds. 20 already precompiled.\n   Resolving package versions...\n    Updating `~/compecon/ECON622/qmd/SomeNewPackage/docs/Project.toml`\n  [673f75a5] + SomeNewPackage v1.0.0-DEV `..`\n    Updating `~/compecon/ECON622/qmd/SomeNewPackage/docs/Manifest.toml`\n  [673f75a5] + SomeNewPackage v1.0.0-DEV `..`\n  Activating project at `~/compecon/ECON622/qmd`\n[ Info: Running posthooks\n[ Info: New package is at /home/paul/compecon/ECON622/qmd/SomeNewPackage\n\n\n\"/home/paul/compecon/ECON622/qmd/SomeNewPackage\""
  },
  {
    "objectID": "bestpractices.html#bestietemplate.jl",
    "href": "bestpractices.html#bestietemplate.jl",
    "title": "Best Practices",
    "section": "BestieTemplate.jl",
    "text": "BestieTemplate.jl"
  },
  {
    "objectID": "bestpractices.html#tests",
    "href": "bestpractices.html#tests",
    "title": "Best Practices",
    "section": "Tests",
    "text": "Tests\n\nessential\norganize code into small functions, test them all\ntest both your code and code from others that you rely on"
  },
  {
    "objectID": "bestpractices.html#documentation",
    "href": "bestpractices.html#documentation",
    "title": "Best Practices",
    "section": "Documentation",
    "text": "Documentation\n\ncreate it for others and your future self"
  },
  {
    "objectID": "bestpractices.html#continuous-integration",
    "href": "bestpractices.html#continuous-integration",
    "title": "Best Practices",
    "section": "Continuous Integration",
    "text": "Continuous Integration\n\nAutomatically execute some actions in the cloud after git commits or pull requests or merges\n\nRun tests\nBuild documentation\nRun static code analysis / Linter\nCheck test coverage\netc\n\nMany providers\n\nGitHub Actions\nTravisCI\netc"
  },
  {
    "objectID": "bestpractices.html#test-coverage",
    "href": "bestpractices.html#test-coverage",
    "title": "Best Practices",
    "section": "Test Coverage",
    "text": "Test Coverage\n\nAutomatically try to determine which lines of code were executed during testing and produce a summary and report\napp.codecov.io\ncoveralls.io"
  },
  {
    "objectID": "bestpractices.html#static-code-analysis",
    "href": "bestpractices.html#static-code-analysis",
    "title": "Best Practices",
    "section": "Static Code Analysis",
    "text": "Static Code Analysis\n\n“linters” analyze code to detect errors and possible bugs\n\nbuilt into VSCode and other editors\nJET.jl for detecting type stability problems (advanced)\n\nformatters check for following text formatting standards around indentation and such"
  },
  {
    "objectID": "bestpractices.html#further-reading",
    "href": "bestpractices.html#further-reading",
    "title": "Best Practices",
    "section": "Further Reading",
    "text": "Further Reading\n\nGentzkow and Shapiro (2014)\nPruim, Gîrjău, and Horton (2023)\nWilson (2017)\nHaider, Riesch, and Jirauschek (2021)\nOrozco et al. (2020)"
  },
  {
    "objectID": "bestpractices.html#references",
    "href": "bestpractices.html#references",
    "title": "Best Practices",
    "section": "References",
    "text": "References\n\n\n\n\n\n\n\n\nGentzkow, Matthew, and Jesse M. Shapiro. 2014. “Code and Data for the Social Sciences: A Practitioner’s Guide.” In. https://api.semanticscholar.org/CorpusID:62408223.\n\n\nHaider, Michael, Michael Riesch, and Christian Jirauschek. 2021. “Realization of Best Practices in Software Engineering and Scientific Writing Through Ready-to-Use Project Skeletons.” Optical and Quantum Electronics 53 (10): 568. https://doi.org/10.1007/s11082-021-03192-4.\n\n\nOrozco, Valérie, Christophe Bontemps, Elise Maigné, Virginie Piguet, Annie Hofstetter, Anne Lacroix, Fabrice Levert, and Jean-Marc Rousselle. 2020. “HOW TO MAKE a PIE: REPRODUCIBLE RESEARCH FOR EMPIRICAL ECONOMICS AND ECONOMETRICS.” Journal of Economic Surveys 34 (5): 1134–69. https://doi.org/https://doi.org/10.1111/joes.12389.\n\n\nPruim, Randall J., Maria-Cristiana Gîrjău, and Nicholas Jon Horton. 2023. “Fostering Better Coding Practices for Data Scientists.” https://arxiv.org/abs/2210.03991.\n\n\nWilson, Jennifer AND Cranston, Greg AND Bryan. 2017. “Good Enough Practices in Scientific Computing.” PLOS Computational Biology 13 (6): 1–20. https://doi.org/10.1371/journal.pcbi.1005510."
  },
  {
    "objectID": "autodiff.html#derivatives",
    "href": "autodiff.html#derivatives",
    "title": "Automatic Differentiation",
    "section": "Derivatives",
    "text": "Derivatives\n\nNeeded for efficient equation solving and optimization\nCan calculate automatically"
  },
  {
    "objectID": "autodiff.html#finite-differences",
    "href": "autodiff.html#finite-differences",
    "title": "Automatic Differentiation",
    "section": "Finite Differences",
    "text": "Finite Differences\n\n\n-0.1450763155960872"
  },
  {
    "objectID": "autodiff.html#forward-automatic-differentiation",
    "href": "autodiff.html#forward-automatic-differentiation",
    "title": "Automatic Differentiation",
    "section": "Forward Automatic Differentiation",
    "text": "Forward Automatic Differentiation\n\n\n(0.10839091026481387, -0.14507631594729084)"
  },
  {
    "objectID": "autodiff.html#reverse-automatic-differentiation",
    "href": "autodiff.html#reverse-automatic-differentiation",
    "title": "Automatic Differentiation",
    "section": "Reverse Automatic Differentiation",
    "text": "Reverse Automatic Differentiation\n\ncompute \\(f(x)\\) in usual forward direction, keep track of each operation and intermediate value\ncompute derivative “backwards”\n\n\\(f(x) = g(h(x))\\)\n\\(f'(x) = g'(h(x)) h'(x)\\)\n\nscales better for high dimensional \\(x\\)\nimplementation more complicated\n\nSimple-ish example https://simeonschaub.github.io/ReverseModePluto/notebook.html"
  },
  {
    "objectID": "autodiff.html#forwarddiff",
    "href": "autodiff.html#forwarddiff",
    "title": "Automatic Differentiation",
    "section": "ForwardDiff",
    "text": "ForwardDiff\n\nForwardDiff.jl\nmature and reliable"
  },
  {
    "objectID": "autodiff.html#forwarddiff-example",
    "href": "autodiff.html#forwarddiff-example",
    "title": "Automatic Differentiation",
    "section": "ForwardDiff Example",
    "text": "ForwardDiff Example\n\n\n3-element Vector{Float64}:\n   0.8066049744615985\n   7.152475995234996\n -15.595102337523281"
  },
  {
    "objectID": "autodiff.html#forwarddiff-notes",
    "href": "autodiff.html#forwarddiff-notes",
    "title": "Automatic Differentiation",
    "section": "ForwardDiff Notes",
    "text": "ForwardDiff Notes\n\nFor \\(f: \\mathbb{R}^n \\to \\mathbb{R}^m\\), the computation scales with \\(n\\)\n\nbest for moderate \\(n\\)\n\nCode must be generic\n\nbe careful when allocating arrays\n\n\n\nfunction wontwork(x)\n  y = zeros(size(x))\n  for i ∈ eachindex(x)\n    y[i] += x[i]*i\n  end\n  return(sum(y))\nend\n\nfunction willwork(x)\n  y = zero(x)\n  for i ∈ eachindex(x)\n    y[i] += x[i]*i\n  end\n  return(sum(y))\nend\n\nbetterstyle(x) = sum(v*i for (i,v) in enumerate(x))"
  },
  {
    "objectID": "autodiff.html#zygote",
    "href": "autodiff.html#zygote",
    "title": "Automatic Differentiation",
    "section": "Zygote",
    "text": "Zygote\n\nZygote.jl\nDoes not allow mutating arrays\nQuite mature, but possibly some bugs remain\nApparently hard to develop, unclear future"
  },
  {
    "objectID": "autodiff.html#zygote-example",
    "href": "autodiff.html#zygote-example",
    "title": "Automatic Differentiation",
    "section": "Zygote Example",
    "text": "Zygote Example\n\n\n8.452290561089217e-15"
  },
  {
    "objectID": "autodiff.html#enzyme",
    "href": "autodiff.html#enzyme",
    "title": "Automatic Differentiation",
    "section": "Enzyme",
    "text": "Enzyme\n“Enzyme performs automatic differentiation (AD) of statically analyzable LLVM. It is highly-efficient and its ability to perform AD on optimized code allows Enzyme to meet or exceed the performance of state-of-the-art AD tools.”\n\n\n┌ Warning: Using fallback BLAS replacements for ([\"dsymv_64_\"]), performance may be degraded\n└ @ Enzyme.Compiler ~/.julia/packages/GPUCompiler/y4cj1/src/utils.jl:59\n\n\n3-element Vector{Float64}:\n   0.8066049744616017\n   7.15247599523499\n -15.595102337523274"
  },
  {
    "objectID": "autodiff.html#enzyme-notes",
    "href": "autodiff.html#enzyme-notes",
    "title": "Automatic Differentiation",
    "section": "Enzyme Notes",
    "text": "Enzyme Notes\n\nDocumentation is not suited to beginners\nDoes not work on all Julia code, but cases where it fails are not well documented. Calling Enzyme.API.runtimeActivity!(true) works around some errors.\nCryptic error messages. Enzyme operates on LLVM IR, and error messages often reference the point in the LLVM IR where the error occurred. Figuring out what Julia code the LLVM IR corresponds to is not easy.\n\nThese may be better now than last year when I first wrote this slide\n\n\n\n\n  1.108786 seconds (1.72 M allocations: 116.841 MiB, 2.44% gc time, 99.10% compilation time)\n  0.331799 seconds (1.59 M allocations: 115.956 MiB, 5.96% gc time, 99.91% compilation time)\n\n\n30000-element Vector{Float64}:\n 0.1521368249654288\n 0.12387585879897856\n 0.8857234227606771\n 0.14821778363062343\n 0.5413014298006785\n 0.3665697380941372\n 0.13984956995562747\n 0.7730640198753364\n 0.9157592331085139\n 0.2593215619546694\n ⋮\n 0.17638027741677498\n 0.2554650297347364\n 0.11166916354718681\n 0.8388902766422559\n 0.5553861769520001\n 0.719686451326661\n 0.4027668349766428\n 0.39804843303511317\n 0.48472133241840876"
  },
  {
    "objectID": "autodiff.html#finitediff",
    "href": "autodiff.html#finitediff",
    "title": "Automatic Differentiation",
    "section": "FiniteDiff",
    "text": "FiniteDiff\n\nFiniteDiff computes finite difference gradients– always test that whatever automatic or manual derivatives you compute are close to the finite difference versions\nuse a package for finite differences to handle rounding error well"
  },
  {
    "objectID": "autodiff.html#chainrules",
    "href": "autodiff.html#chainrules",
    "title": "Automatic Differentiation",
    "section": "ChainRules",
    "text": "ChainRules\n\nChainRules\nused by many AD packages to define the derivatives of various functions.\nUseful if you want to define a custom derivative rule for a function."
  },
  {
    "objectID": "autodiff.html#differentiationinterface",
    "href": "autodiff.html#differentiationinterface",
    "title": "Automatic Differentiation",
    "section": "DifferentiationInterface",
    "text": "DifferentiationInterface\n\nDifferentiationInterface gives a single interface for many differentiation packages\n\n\n\n┌ Warning: Using fallback BLAS replacements for ([\"dsymv_64_\"]), performance may be degraded\n└ @ Enzyme.Compiler ~/.julia/packages/GPUCompiler/y4cj1/src/utils.jl:59\n\n\n3-element Vector{Float64}:\n   0.8066049744616017\n   7.15247599523499\n -15.595102337523274\n\n\n\nimprove performance by reusing intermediate variables\n\n\n\n3-element Vector{Float64}:\n   0.8066049744616017\n   7.15247599523499\n -15.595102337523274"
  },
  {
    "objectID": "autodiff.html#other-packages-1",
    "href": "autodiff.html#other-packages-1",
    "title": "Automatic Differentiation",
    "section": "Other Packages",
    "text": "Other Packages\n\nhttps://juliadiff.org/"
  },
  {
    "objectID": "autodiff.html#reversediff.jl",
    "href": "autodiff.html#reversediff.jl",
    "title": "Automatic Differentiation",
    "section": "ReverseDiff.jl",
    "text": "ReverseDiff.jl\n\nReverseDiff.jl a tape based reverse mode package\nLong lived and well tested\nlimitations. Importantly, code must be generic and mutation of arrays is not allowed."
  },
  {
    "objectID": "autodiff.html#yota.jl",
    "href": "autodiff.html#yota.jl",
    "title": "Automatic Differentiation",
    "section": "Yota.jl",
    "text": "Yota.jl\n\nYota.jl another tape based package\nCompatible with Chainrules.jl\nSomewhat newer and less popular\nIts documentation has a very nice explanation of how it works."
  },
  {
    "objectID": "autodiff.html#tracker",
    "href": "autodiff.html#tracker",
    "title": "Automatic Differentiation",
    "section": "Tracker",
    "text": "Tracker\nTracker is a tape based reverse mode package. It was the default autodiff package in Flux before being replaced by Zygote. No longer under active development."
  },
  {
    "objectID": "autodiff.html#diffractor",
    "href": "autodiff.html#diffractor",
    "title": "Automatic Differentiation",
    "section": "Diffractor",
    "text": "Diffractor\nDiffractor is automatic differentiation package in development. It was once hoped to be the future of AD in Julia, but has been delayed. It plans to have both forward and reverse mode, but only forward mode is available so far."
  }
]