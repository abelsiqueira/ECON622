---
title       : "Problem Set 1"
subtitle    : "ECON622"
author      :
date        : 2024-09-11
weave_options:
      out_width : 100%
      wrap : true
      fig_width : 800
      fig_height : 800
      dpi : 192
---


Write your answers in a literate programming format (a jupyter or Pluto.jl notebook, or a Weave.jl or quarto markdown file). Please include both the original file and an html or pdf output.

# Problem 1

1. What is your intended field?
2. Give an example of a paper that contains the sort of models you want to be able to compute.

# Problem 2

Read all sections of [Chapter 1 of *Scientific Programming in Julia*](https://juliateachingctu.github.io/Scientific-Programming-in-Julia/stable/lecture_01/motivation/). Turn in answers to the following exercises from the "Lab" section.

1. Evaluate the code of the function called polynomial in Julia REPL and evaluate the function itself with the following arguments.
`a = [-19, 7, -4, 6]` and `x=3`.
2. Create variables `x` and `accumulator`, storing floating point 3.0 and integer value 0 respectively. Check the type of variables using typeof function.
3. Create variable `c` containing an array of even numbers from `2` to `42`. Furthermore create variable `d` that is different from `c` only at the 7th position, which will contain `13`.
4. Define a function called `addone` with one argument, that adds 1 to the argument.
5. Lookup `docstring` for the basic functions that we have introduced in the previous exercises: typeof, eltype, length, collect, copy, methods and methodswith.
6. Choose one of the variables af to ac representing polynomial coefficients and try to evaluate it with the polynomial function at point x=3 as before. Lookup the type of coefficient collection variable itself with typeof and the items in the collection with eltype. In this case we allow you to consult your solution with the expandable solution bellow to find out more information about a particular example.

```julia; eval=false
af = [-19.0, 7.0, -4.0, 6.0]
at = (-19, 7, -4, 6)
ant = (a₀ = -19, a₁ = 7, a₂ = -4, a₃ = 6)
a2d = [-19 -4; 7 6]
ac = [2i^2 + 1 for i in -2:1]
```

7. Rewrite the following code inside our original polynomial function with map, enumerate and anonymous function.

```julia; eval=false
accumulator = 0
for i in length(a):-1:1
    accumulator += x^(i-1) * a[i] # ! 1-based indexing for arrays
end
```
